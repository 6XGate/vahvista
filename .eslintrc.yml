root: true

env:
  browser: false
  worker: true
  node: true
  es6: true

plugins:
  - '@typescript-eslint'
  - 'import'

extends:
  - 'eslint:recommended'
  - 'plugin:import/warnings'
  - 'plugin:import/errors'
  - 'plugin:promise/recommended'
  - 'plugin:node/recommended-module'
  - 'standard'

parserOptions:
  ecmaVersion: 2019
  sourceType: module

reportUnusedDisableDirectives: true

rules:
  ## Core ESLint rules ##

  ### Possible Errors ###
  no-await-in-loop: warn
  no-promise-executor-return: error
  no-unsafe-optional-chaining: error

  ### Best Practices ###
  block-scoped-var: error
  class-methods-use-this: warn
  consistent-return: error
  default-case: error
  default-param-last: error
  grouped-accessor-pairs: [ error, getBeforeSet ]
  guard-for-in: error
  no-alert: error
  no-constructor-return: error
  no-div-regex: error
  no-else-return: error
  no-implicit-coercion: error
  no-implicit-globals: error
  no-loop-func: &no-loop-func error
  no-return-await: error
  no-script-url: error
  no-useless-concat: error
  radix: [ error, as-needed ]
  require-await: &require-await error
  require-unicode-regexp: error

  ### Strict mode ###
  strict: error

  ### Variables ###
  no-label-var: error
  no-shadow: &no-shadow warn

  ### Stylistic Issues ###
  array-bracket-newline: [ error, { multiline: true }]
  array-element-newline: [ error, consistent ]
  func-name-matching: warn
  linebreak-style: [ error, unix ]
  no-continue: warn
  no-lonely-if: error
  no-multi-assign: error
  no-nested-ternary: warn
  padding-line-between-statements: [ error, { blankLine: always, prev: '*', next: return } ]
  prefer-exponentiation-operator: error
  prefer-object-spread: warn
  semi-style: error
  switch-colon-spacing: error
  template-tag-spacing: [ error, never ]
  wrap-regex: warn

  ### ECMAScript 6 ###
  arrow-body-style: [ error, as-needed ]
  arrow-parens: [ error, as-needed ]
  no-confusing-arrow: [ error, { allowParens: true } ]
  no-var: error
  prefer-numeric-literals: error
  prefer-rest-params: warn
  prefer-spread: warn
  prefer-template: warn

  ## Import ##

  ### Static analysis ###
  import/no-dynamic-require: error
  import/no-self-import: error
  import/no-useless-path-segments: error

  ### Helpful warnings ###
  import/no-mutable-exports: error
  import/no-unused-modules: error

  ### Module systems ###
  import/no-amd: error

  ### Style guide ###
  import/order: [ error, alphabetize: { order: asc } ]
  import/newline-after-import: error
  import/no-anonymous-default-export: error

  ## Node ##

  ### Possible Errors ###
  #node/no-missing-import: off
  #node/no-missing-require: off
  #node/no-unpublished-import: off
  #node/no-unpublished-require: off

overrides:
  # Ensure CommonJS modules are checked.
  - files: [ '*.cjs' ]

  # Ensure ECMAScript modules are checked, with tuning.
  - files: [ '*.mjs' ]
    rules: &esm-rules
      # Allow modules for the build configuration.
      node/no-unsupported-features/es-syntax: [ error, { version: '>=12.18.0', ignores: [ modules, dynamicImport ] } ]
      import/no-commonjs:  error

  # Build configuration ES modules.
  - files: [ 'rolete.*.js' ]
    rules: *esm-rules

  - files: [ '*.ts', '*.tsx' ]
    env:
      browser: true
    extends:
      - 'plugin:@typescript-eslint/recommended'
      - 'plugin:@typescript-eslint/recommended-requiring-type-checking'
      - 'plugin:import/typescript'
      - 'standard-with-typescript'
      - 'plugin:@typescript-eslint/eslint-recommended'
    parserOptions:
      project: ./tsconfig.json
      tsconfigRootDir: .
    rules:
      ## TypeScript ##
      ### Standard rules ###
      '@typescript-eslint/array-type': error
      '@typescript-eslint/ban-tslint-comment': error
      '@typescript-eslint/ban-types': warn
      '@typescript-eslint/class-literal-property-style': error
      '@typescript-eslint/consistent-type-assertions': error
      '@typescript-eslint/consistent-type-imports': error
      '@typescript-eslint/explicit-function-return-type': [ error, { allowExpressions: true } ]
      '@typescript-eslint/explicit-member-accessibility': [ error, { accessibility: no-public } ]
      '@typescript-eslint/explicit-module-boundary-types': off
      '@typescript-eslint/member-delimiter-style': error
      '@typescript-eslint/naming-convention': warn
      '@typescript-eslint/no-base-to-string': error
      '@typescript-eslint/no-non-null-asserted-optional-chain': error
      '@typescript-eslint/no-empty-interface': warn
      '@typescript-eslint/no-implicit-any-catch': error
      '@typescript-eslint/no-invalid-void-type': error
      '@typescript-eslint/no-misused-promises': [ error, { checksVoidReturn: false } ]
      '@typescript-eslint/no-parameter-properties': error
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': warn
      '@typescript-eslint/no-unnecessary-condition': warn
      '@typescript-eslint/no-unnecessary-qualifier': warn
      '@typescript-eslint/no-unnecessary-type-arguments': warn
      '@typescript-eslint/no-unnecessary-type-constraint': warn
      '@typescript-eslint/no-var-requires': off
      '@typescript-eslint/prefer-includes': warn
      '@typescript-eslint/prefer-literal-enum-member': warn
      '@typescript-eslint/prefer-readonly': warn
      '@typescript-eslint/prefer-regexp-exec': error
      '@typescript-eslint/prefer-string-starts-ends-with': warn
      '@typescript-eslint/restrict-template-expressions':
        - error
        - { allowNumber: true, allowBoolean: false, allowAny: false, allowNullish: true }
      ### ESLint and import replacement rules ###
      '@typescript-eslint/comma-dangle': # HACK: Not properly synchronized with Standard JS
        - error
        - arrays: never
          objects: never
          imports: never
          exports: never
          functions: never
      '@typescript-eslint/no-duplicate-imports': error
      '@typescript-eslint/no-empty-function': error
      '@typescript-eslint/no-loop-func': *no-loop-func
      '@typescript-eslint/no-loss-of-precision': # HACK: Not properly synchronized with Standard JS
        - error
      '@typescript-eslint/no-shadow': *no-shadow
      '@typescript-eslint/require-await': *require-await
      '@typescript-eslint/object-curly-spacing': # HACK: Not properly synchronized with Standard JS
        - error
        - always
      '@typescript-eslint/space-infix-ops': # HACK: Not properly synchronized with Standard JS
        - error
      ## Import ##
      ### Style guide ###
      import/extensions: [ error, never, { svg: always, vue: always } ]
      # TypeScript files are treated as ECMAScript files.
      <<: *esm-rules
      # Turn off these rules to prevent conflicts with TypeScript.
      consistent-return: off
      comma-dangle: off # HACK: Not properly synchronized with Standard JS
      no-empty-function: off
      no-implied-eval: off # HACK: Not properly disabled in Standard TS
      no-loop-func: off
      no-loss-of-precision: off # HACK: Not properly synchronized with Standard JS
      no-shadow: off
      require-await: off
      object-curly-spacing: off # HACK: Not properly synchronized with Standard JS
      space-infix-ops: off # HACK: Not properly synchronized with Standard JS
      import/no-duplicates: off
      node/no-missing-import: off
      # Standard TS is too strict by forbidding types and const of the same name, TypeScript will catch
      # these errors otherwise. The main use case is a string union and an const array of its values.
      '@typescript-eslint/no-redeclare': off
